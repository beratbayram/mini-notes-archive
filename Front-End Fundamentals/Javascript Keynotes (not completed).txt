! Use tab size as 8 for better reading !

#####################################################################################################
JAVASCRIPT KEYNOTES #################################################################################
#####################################################################################################

    !!! The value of a variable does not reset (or cleared) when you redeclare it.
    !!! document.location.href="http://www.w3schools.com/"; // Redirects to another page

    Breaking Up A Code Line -------------------------------------------------------------------------

        You can break up a code line within a text string with a backslash.

            document.write("Hello \             // This one will be displayed properly
            World!");

            document.write \                    // However, you cannot break up like this
            ("Hello World!");

    Labels ------------------------------------------------------------------------------------------

        labelname: {                            // The continue (with(out) a label) can only be used
            ...                                 // to skip one iteration.
            if(...) break labelname
            ...                                 // The break; without a label reference, can only be
            }                                   // used to jump out of a loop or a switch but with a
        outer: if (...) {...}                   // label, can be used to jump out of any code block

#####################################################################################################
DATA TYPES ------------------------------------------------------------------------------------------
#####################################################################################################

     *  There are 6 primitive types: string, number, boolean, symbol, null and undefined

     *  Primitives are single values without any extra info. The language allows access to methods 
     and properties of them. In order for that to work, a special “object wrapper” that provides the
     extra functionality is created, and then is destroyed. (Note: (123456).toString(2) or 
     123456..toString(2) JS confuses float dot with object dot)

    Tricky Data Types:
        typeof NaN                              // Returns "number"
        typeof [1,2,3,4]                        // Returns "object"
        typeof newVar                           // Returns "undefined"
        typeof null                             // Returns "object"

    !!! Because Arrays and Dates are actually objects, typeof cannot used to check it. Another simple
        way to check it:

    function isArray(myArray) {                 | function isDate(myDate) {
        return myArray.constructor === Array;   |     return myDate.constructor === Date;
    }                                           | }

    !!! 0.1 + 0.2 === 0.30000000000000004 not 0.3 . JS have difficulties with precise floating
        point values. Instead use it like that (0.1 * 10 + 0.2 * 10) / 10.

#####################################################################################################
COMPARISON ------------------------------------------------------------------------------------------
#####################################################################################################

     *  +x equals to Number(x)
     *  undefined + 1 === null
     *  +null === 0, +"" === 0, +undefined === NaN;
     *  Everything without a "proper value" is false: 0, -0, "", undefined, null, NaN
        (but " " or "0" is true)

     *  === means equal value AND equal type whereas, !== means not equal value OR not equal type
     *  undefined only equals null, undefined and no other value.
     *  Comparing two JavaScript objects will always return false unless they come from same origin.
     *  When comparing a string with a number, JavaScript will convert the string to a number when
        doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN.
     *  Any comparison with NaN is always false, including itself.
     *  When comparing two strings, "2" will be greater than "12", because (alphabetically) 1 is
        less than 2.

    !!! Only exp can be used in ternary operator. (e.g. break/continue aren’t allowed.)
    !!! Switch cases use strict comparison (===).

#####################################################################################################
OBJECTS ---------------------------------------------------------------------------------------------
#####################################################################################################
        
        !!! The delete keyword deletes a property from an object and is designed to be used on
            properties. It has no effect on variables or functions (delete user.name)    
        !!! The delete keyword does not delete inherited properties, but if you delete a 
            prototype property, it will affect all objects inherited from the prototype
        !!! var objA = objB; JS objects are addressed by reference, not by value. objB is also
            objA, not just a copy of it. Changes to one, will reflect to other. 
               
        * Computed properties:
            let fruit = prompt("Which fruit to buy?", "apple");        
            let bag = {                         // Property name is taken from a variable
            [fruit]: 5;                         // bag == {apple:5} if prompt is "apple"
            };
        * Property value shorthand:
            let user = {
              name,                             // same as name:name
              age: 30
            };

    Constructors-------------------------------------------------------------------------------------

        * Constructors should start with a capital letter and they can be used to make multiple
        similar objects with the "new" keyword.

            function User(name) {
                // this = {}; (implicitly)
                this.name = name;
                this.age = age;             // Properties can be multi-word but quotes must be
                this."work address" = null; // used. For access, ali["work address"]
                // return this; (implicitly)
            }

    Prototypes --------------------------------------------------------------------------------------

        * Prototypes allows you to add new properties to existing object of that constructor.
          Person.prototype.nationality = "English";

    Symbols -----------------------------------------------------------------------------------------
        
        let user = { ... };		    // Belongs to another code. We dont know what's in it
        let id = Symbol("description");	    // Create a new symbol. (Description has no meanning)
        user[id] = 1;			    // Add or set it with [].
        alert( user[id] ); 		    // Access the data using the symbol as the key
       
        * As "user" belongs to another code. Freely adding new stuff is unsafe. But a symbol cant
          be accessed accidentally, the third-party code probably won’t even see it, so it is
          probably all right to do. Symbols are always unique, except for "Global Symbol"s.

        !!! for..in , object.keys() intentionally dont see them but object.assign also copies them.
        
        * Global Symbols: Symbols inside the registry are called global symbols. They are
        application-wide, accessible everywhere in the code – that’s what they are for.
       
            let id = Symbol.for("id");      // Read from the registry if not exist, it is created
            let id2 = Symbol.for("id");     // Read it again (maybe from another part of the code)
            alert( id === id2 );            // the same symbol

    This --------------------------------------------------------------------------------------------
    
        * The value of this is the object “before dot”, the one used to call the method.
        * If not bound; it equals to undefined with "use strict"
        * Methods like call(), and apply() can refer this to any object.
        * Arrow functions do not bind their own this instead, they inherit it (just like any 
          other variable) from the parent scope

    Loops -------------------------------------------------------------------------------------------

        for (let key in object/array) {     // uses keys (for arrays keys are index numbers)
            console.log(i);                 // (not recommended for arrays)
            console.log(obje[i])
        }
        for (let iterator of array) {       // uses iterators
            console.log(i);                 // doesn't work on objects
        }
        
#####################################################################################################
BUILT-INS -------------------------------------------------------------------------------------------
#####################################################################################################

    GLOBAL FUNCTIONS ################################################################################

        * eval()				// Executes a string as if it was script code
        * isFinite()				// Determines if a value is a finite, legal number
        * parseFloat()				// Parses a string and returns a float
        * parseInt()				// Parses a string and returns an integer

        * setTimeOut(func,x)			// Wait x ms then run func
        * setInterval(func,x)			// Call func at every x ms

        Popup boxes:
            * Alert("sometext")
            * Confirm("sometext"):boolean
            * Prompt("sometext","defaultvalue"):inputString / null.

    OBJECTS #########################################################################################
    
        Number --------------------------------------------------------------------------------------

            * toExponential(x) 		        // Converts a number into an exponential notation
            * toFixed(x) 			// Formats a number with x numbers of digits after
                                                    the decimal point
            * toPrecision(x) 			// Formats a number to x length
            * toString() 			// Converts a Number object to a string
            * valueOf() 			// Returns the primitive value of a Number object

        String --------------------------------------------------------------------------------------

            * indexOf(x) 			// Returns the position of the first found x
            * lastIndexOf(x) 			// Returns the position of the last found x
            * includes()
            * match()				// Searches for a regex then returns the matches
            * replace(x)			// match() it then replace them with x
            * search() 				// match() it but instead return the position

            * slice()				// Extracts a part of a string and returns that
            * split()				// Splits a string into an array of substrings

            * toLowerCase()
            * toUpperCase()
            * valueOf()			        // Returns the primitive value

            !!! regex: regular expression (https://www.w3schools.com/js/js_regexp.asp)
            !!! "\u00A9" === copyright mark

        Array ---------------------------------------------------------------------------------------

            Member Functions:

                * concat()			// concatenates arrays and returns a copy of them
                * pop() 			// Removes the last one and returns that
                * push()			// Adds new ones to the end and returns new length

                * shift() 			// Removes the first one and returns that element
                * unshift() 			// Adds new ones to the beginning and returns the
                                                   new length

                * reverse() 			// Reverses the order of the elements in an array
                * slice() 			// Selects a part of it, and returns that
                * sort(fn) 			// Sorts items as strings by default!
                * splice() 			// Adds/Removes elements from an array

            !!! arrayOfReturns = arr.map(function(item, index, array) { // returns the new value });

            !!! To add completely new key-value pair to an existing object, just use it as if it was
            there beforehand ( ex: obj.newKey=newValue )

    LIBRARIES #######################################################################################

        Object --------------------------------------------------------------------------------------

            * Object.keys(obj)                  // returns an array of keys.
            * Object.values(obj)                // returns an array of values.
            * Object.entries(obj)               // returns an array of [key, value] pairs.
            * Object.fromEntries(array)

                
                let doubleValues = Object.fromEntries(
                                       Object.entries(values).map(([key, value]) => [key, value * 2])
                                   ); // convert to array, map, and then fromEntries to give it back
        Math ----------------------------------------------------------------------------------------

            * Math.E ,Math.PI

            * Math.round()			// Returns nearest int
            * Math.ceil()   			// Returns rounded up int value
            * Math.floor()			// Returns rounded down int value

            * Math.pow()			// Power function
            * Math.sqrt()			// Squareroot function
            * Math.min(x, y, z, ...) or Math.max(x, y, z, ...)
            * Math.random()                     // returns a random number between 0 (inclusive) and
                                                // 1 (exclusive)

            !!! This function returns a random number between min and max (both included):

                function getRandomInt(min, max) {
                    return Math.floor(Math.random() * (max - min + 1) ) + min;
                }
        
        Date ----------------------------------------------------------------------------------------

            There are four ways of instantiating a date:

                * new Date()		        // current date and time
                * new Date(milliseconds) 	// milliseconds since 1970/01/01
                * new Date(dateString)
                * new Date(year, month, day, hours, minutes, seconds, milliseconds)

            !!! Date objects can be simply compared with comparison operators like this "myDate>now"

            ex: myDate.setDate(myDate.getDate()+5)	// 5 days into the future

        Map -----------------------------------------------------------------------------------------

            *  Map – is a collection of keyed values.
            *  Methods and properties:
                * let map = new Map([iterable]) // creates the map, with optional iterable
                * map.set(key, value)           // stores the value by the key (chainable)
                * map.get(key)                  // returns the value by the key or undefined
                * map.has(key)                  // returns true if the key exists, false otherwise.
                * map.delete(key)               // removes the value by the key.
                * map.clear()                   // removes everything from the map.
                * map.size                      // returns the current element count.
                * map.keys(), .values() ,.entries() // returns iterables
            * Preserves key types, objects can also be keys.

        Set -----------------------------------------------------------------------------------------

            * Set – is a collection of unique values.
            * Methods and properties:
                * let set = new Set([iterable]) // creates the set, with optional iterable
                * set.add(value)                // adds a value (does nothing if exists)(chainable)
                * set.delete(value)             // removes the value, returns true if value existed
                                                // at the moment of the call, otherwise false.
                * set.has(value)                // returns true if the value exists in the set
                * set.clear()                   // removes everything from the set.
                * set.size                      //  returns the current element count.

        !!! Iteration over Map and Set is always in the insertion order and elements can’t be 
            reordered nor directly get an element by its number.
        !!! WeakMap and WeakSet are used as “secondary” data structures. Once the object is removed
            from the main storage, if it is only found as the key of WeakMap or in a WeakSet, it will
            be cleaned up automatically.


#####################################################################################################
CLASSES ---------------------------------------------------------------------------------------------
#####################################################################################################

    !!! ES6 Feature. Internet Explorer does not support classes.

    class Car {
        constructor(brand) {
            this._carname = brand;
        }
        get carname() {                 // getter/setter name cannot be the same with the
            return this._carname;       // property. Using _ to distinguish them is common
        }
        set carname(x) {
            this._carname = x;
        }
        static hello() {                // Statics are defined on the class itself, not on
            return "Hello";             // the prototype. That means you cannot call a static
        }                               // method on the object, but on the class directly.
    }

    class Model extends Car {           // Inheritance
        constructor(brand, mod) {       // By calling the super() in the constructor, we call
                super(brand);           // the parent's constructor method and gets access to
                this.model = mod;       // the parent's properties and methods.
        }
        show() {
                return this._carname + ', it is a ' + this.model;
        }
    }

    mycar = new Car("Ford");

    document.getElementById("demo").innerHTML = mycar.carname;  // use of getter
    mycar.carname = "Volvo";                                    // use of setter

#####################################################################################################
EVENTS ----------------------------------------------------------------------------------------------
#####################################################################################################

    <element event="JS CODE">

        * onClick
        * onLoad and onUnload
        * onFocus, onBlur and onChange (often used in validation of form fields)
        * onMouseOver and onMouseOut
        * ...

    -------------------------------------------------------------------------------------------------

    onSubmit

        The onSubmit event is used to validate ALL form fields before submitting it.
        The checkForm() function will be called when the user clicks the submit button in the form.
        The function checkForm() returns either true or false. If it returns true the
        form will be submitted, otherwise the submit will be cancelled:

        <form method="post" action="xxx.htm" onsubmit="return checkForm()">


    Miscellaneous Notes -----------------------------------------------------------------------------

#####################################################################################################
BEST PRACTICES & COMMON MISTAKES --------------------------------------------------------------------
#####################################################################################################

    !!! Do not start names with a $ sign. It will put you in conflict with many JS library names
    !!! Avoid global variables, with, new (if possible), == and eval()
    !!! Accessing the HTML DOM is very slow. If you expect to access a DOM element several times,
        access it once and use it as a local variable.
    !!! Don’t use comparisons with a variable which may be null/undefined, unless you’re really sure
        of what you’re doing. If a variable can have these values, check for them separately.

    let message = (age < 3) ? 'Hi, baby!' :
                  (age < 18) ? 'Hello!' :
                  (age < 100) ? 'Greetings!' :
                  'What an unusual age!';

#####################################################################################################
SOURCES ---------------------------------------------------------------------------------------------
#####################################################################################################

    1. https://www.w3schools.com/js/
    2. https://javascript.info
