! Use tab size as 8 for better reading !

#####################################################################################################
JAVASCRIPT KEYNOTES #################################################################################
#####################################################################################################

    !!! The value of a variable does not reset (or cleared) when you redeclare it.
    !!! document.location.href="http://www.w3schools.com/"; // Redirects to another page

    JS Global Functions -----------------------------------------------------------------------------

        * eval()				// Executes a string as if it was script code
        * isFinite()				// Determines if a value is a finite, legal number
        * Number()				// Converts an object's value to a number
        * parseFloat()				// Parses a string and returns a float
        * parseInt()				// Parses a string and returns an integer
        * String()				// Converts an object's value to a string

        * setTimeOut(func,x)			// Wait x ms then run func
        * setInterval(func,x)			// Call func at every x ms

        Popup boxes:
            * Alert("sometext")
            * Confirm("sometext"):boolean
            * Prompt("sometext","defaultvalue"):inputString / null.

    Breaking Up A Code Line -------------------------------------------------------------------------

        You can break up a code line within a text string with a backslash.

            document.write("Hello \             // This one will be displayed properly
            World!");

            document.write \                    // However, you cannot break up like this
            ("Hello World!");

    Labels ------------------------------------------------------------------------------------------

        labelname: {                            // The continue (with(out) a label) can only be used
            ...                                 // to skip one iteration.
            if(...) break labelname
            ...                                 // The break; without a label reference, can only be
            }                                   // used to jump out of a loop or a switch but with a
                                                // label, can be used to jump out of any code block

#####################################################################################################
TYPE CONVERSION -------------------------------------------------------------------------------------
#####################################################################################################

    Tricky Data Types:
        typeof NaN                              // Returns "number"
        typeof [1,2,3,4]                        // Returns "object"
        typeof newVar                           // Returns "undefined"
        typeof null                             // Returns "object"

    !!! Because Arrays and Dates are actually objects, typeof cannot used to check it. Another simple
        way to check it:

    function isArray(myArray) {                 | function isDate(myDate) {
        return myArray.constructor === Array;   |     return myDate.constructor === Date;
    }                                           | }

#####################################################################################################
COMPARISON ------------------------------------------------------------------------------------------
#####################################################################################################

     *  Everything without a "proper value" is false: 0, -0, "", undefined, null, NaN
     *  === means equal value AND equal type whereas, !== means not equal value OR not equal type
     *  Comparing two JavaScript objects will always return false unless they come from same origin.
     *  When comparing a string with a number, JavaScript will convert the string to a number when
        doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN.
     *  Any comparison with NaN is always false.
     *  When comparing two strings, "2" will be greater than "12", because (alphabetically) 1 is
        less than 2.

    Switch-case:

        !!! Switch cases use strict comparison (===).
        !!! If multiple cases matches a case value, the first case is selected.

#####################################################################################################
OBJECTS ---------------------------------------------------------------------------------------------
#####################################################################################################

        for (let key in object/array) {         // uses keys
            console.log(i);                     // for arrays keys are index numbers
            console.log(obje[i])                // might run non-sequential !!!
        }                                       // (not recommended for arrays)

        for (let iterator of array) {           // uses iterators
            console.log(i);                     // doesn't work on objects
        }

    Number Object -----------------------------------------------------------------------------------

        var numObj = new Number(num)

        * toExponential(x) 		        // Converts a number into an exponential notation
        * toFixed(x) 				// Formats a number with x numbers of digits after
                                                   the decimal point
        * toPrecision(x) 			// Formats a number to x length
        * toString() 				// Converts a Number object to a string
        * valueOf() 			        // Returns the primitive value of a Number object

    String Object -----------------------------------------------------------------------------------

        * indexOf(x) 				// Returns the position of the first found x
        * lastIndexOf(x) 			// Returns the position of the last found x
        * match()				// Searches for a regex then returns the matches
        * replace(x)				// match() it then replace them with x
        * search() 				// match() it but instead return the position

        * slice()				// Extracts a part of a string and returns that
        * split()				// Splits a string into an array of substrings
        * substring()				// Extracts the characters
                                                   (between two specified indices)
        * substr()				// Extracts the characters
                                                   (beginning at a specified start position and
                                                   through the specified number of character)
        * toLowerCase()
        * toUpperCase()
        * valueOf()			        // Returns the primitive value

        !!! regex: regular expression (https://www.w3schools.com/js/js_regexp.asp)

    Date Object -------------------------------------------------------------------------------------

        There are four ways of instantiating a date:

            * new Date()		        // current date and time
            * new Date(milliseconds) 	        // milliseconds since 1970/01/01
            * new Date(dateString)
            * new Date(year, month, day, hours, minutes, seconds, milliseconds)

        !!! Date objects can be simply compared with comparison operators like this "myDate>today"

        ex: myDate.setDate(myDate.getDate()+5)	// 5 days into the future

    Array Object ------------------------------------------------------------------------------------

        An array can be defined in three ways:

            1) var myCars=new Array();          // regular array (add an optional integer
               myCars[0]="Saab";	        // argument to control array's size)
               myCars[1]="Volvo";
               myCars[2]="BMW";
            2) var myCars=new Array("Saab","Volvo","BMW");      // condensed array
            3) var myCars=["Saab","Volvo","BMW"];               // literal array

        Member Functions:

            * concat()				// concatenates arrays and returns a copy of them
            * pop() 				// Removes the last one and returns that
            * push()				// Adds new ones to the end and returns new length

            * shift() 				// Removes the first one and returns that element
            * unshift() 			// Adds new ones to the beginning and returns the
                                                   new length

            * reverse() 			// Reverses the order of the elements in an array
            * slice() 				// Selects a part of it, and returns that
            * sort() 				// Sorts the elements of an array
            * splice() 				// Adds/Removes elements from an array

            * valueOf()				// Returns the primitive value
            * toString()

        !!! To add completely new key-value pair to an existing object, just use it as if it was
        there beforehand ( ex: obj.newKey=newValue )

    Math Object -------------------------------------------------------------------------------------

        * Math.E ,Math.PI

        * Math.round()				// Returns nearest int
        * Math.ceil()   			// Returns rounded up int value
        * Math.floor()				// Returns rounded down int value

        * Math.pow()				// Power function
        * Math.sqrt()				// Squareroot function
        * Math.min(x, y, z, ...)
        * Math.max(x, y, z, ...)
        * Math.random()                         // returns a random number between 0 (inclusive) and
                                                // 1 (exclusive)

        !!! This function returns a random number between min and max (both included):

            function getRandomInt(min, max) {
                return Math.floor(Math.random() * (max - min + 1) ) + min;
            }

#####################################################################################################
THIS ------------------------------------------------------------------------------------------------
#####################################################################################################

     *  Alone, this refers to the global object.
     *  In a method, this refers to the owner object.
     *  In an event, this refers to the element that received the event.

     *  In a function, this refers to the global object.
     *  In a function, in strict mode, this is undefined.

     *  Methods like call(), and apply() can refer this to any object.

     *  Arrow functions do not bind their own this instead, they inherit it (just any other variable)
        from the parent scope

#####################################################################################################
CLASSES ---------------------------------------------------------------------------------------------
#####################################################################################################

    !!! ES6 Feature. Internet Explorer does not support classes.

    class Car {
        constructor(brand) {
            this._carname = brand;
        }
        get carname() {                 // getter/setter name cannot be the same with the
            return this._carname;       // property. Using _ to distinguish them is common
        }
        set carname(x) {
            this._carname = x;
        }
        static hello() {                // Statics are defined on the class itself, not on
            return "Hello";             // the prototype. That means you cannot call a static
        }                               // method on the object, but on the class directly.
    }

    class Model extends Car {           // Inheritance
        constructor(brand, mod) {       // By calling the super() in the constructor, we call
                super(brand);           // the parent's constructor method and gets access to
                this.model = mod;       // the parent's properties and methods.
        }
        show() {
                return this._carname + ', it is a ' + this.model;
        }
    }

    mycar = new Car("Ford");

    document.getElementById("demo").innerHTML = mycar.carname;  // use of getter
    mycar.carname = "Volvo";                                    // use of setter

#####################################################################################################
EVENTS ----------------------------------------------------------------------------------------------
#####################################################################################################

    <element event="JS CODE">

        * onClick
        * onLoad and onUnload
        * onFocus, onBlur and onChange (often used in validation of form fields)
        * onMouseOver and onMouseOut
        * ...

    -------------------------------------------------------------------------------------------------

    onSubmit

        The onSubmit event is used to validate ALL form fields before submitting it.
        The checkForm() function will be called when the user clicks the submit button in the form. The
        function checkForm() returns either true or false. If it returns true the
        form will be submitted, otherwise the submit will be cancelled:

        <form method="post" action="xxx.htm" onsubmit="return checkForm()">


    Miscellaneous Notes -----------------------------------------------------------------------------

#####################################################################################################
BEST PRACTICES & COMMON MISTAKES --------------------------------------------------------------------
#####################################################################################################

    !!! Do not start names with a $ sign. It will put you in conflict with many JS library names
    !!! Avoid global variables, with, new (if possible), == and eval()
    !!! Accessing the HTML DOM is very slow. If you expect to access a DOM element several times,
        access it once and use it as a local variable.

    Hiding JS From View:

        <script type="text/javascript">         // To prevent browsers which doesn't execute js from
        <!--				        // displaying code as normal text, the HTML comment
        document.write("Hello World!");	        // tag should be used to "hide" the js
        //-->				        // (It is also a part of the JS standard)
        </script>

        !!! The two forward slashes at the end of comment line (//) is the JavaScript comment symbol.
        This prevents JavaScript from executing the --> tag.
        !!! Just use separate .js file instead.

    Misunderstanding Floats ------------------------------------------------------------------------

        !!! 0.1 + 0.2 === 0.30000000000000004 not 0.3 . JS have difficulties with precise floating
             point values. Instead use it like that (0.1 * 10 + 0.2 * 10) / 10.